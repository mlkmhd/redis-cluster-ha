apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workload.user.cattle.io/workloadselector: deployment-redis-ha-load-balancer
  name: redis-ha-load-balancer
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.haproxy.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-redis-ha-load-balancer
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/redis-ha-config: {{ include (print $.Template.BasePath "/redis-ha-configmap.yaml") . | sha1sum }}
        checksum/haproxy-config: {{ include (print $.Template.BasePath "/haproxy-config.yaml") . | sha1sum }}
      labels:
        workload.user.cattle.io/workloadselector: deployment-redis-ha-load-balancer
    spec:
      initContainers:
        - name: config-init
          image: alpine:latest
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
{{ toYaml .Values.init.resources | indent 12 }}
          command:
            - sh
          args:
            - /readonly-config/init.sh
          env:
{{- if .Values.auth }}
          - name: AUTH
            valueFrom:
              secretKeyRef:
              {{- if .Values.existingSecret }}
                name: {{ .Values.existingSecret }}
              {{- else }}
                name: {{ template "redis-ha.fullname" . }}
              {{- end }}
                key: {{ .Values.authKey }}
{{- end }}
          volumeMounts:
            - name: readonly-config
              mountPath: /readonly-config
              readOnly: true
            - name: config
              mountPath: /config
      containers:
      - image: {{ .Values.haproxy.image }}
        name: haproxy
        command:
          - haproxy
        args:
          - "-f"
          - /config/haproxy.cfg
        ports:
        - containerPort: 6379
          name: 6379tcp1
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /config
          name: config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: readonly-config
        configMap:
          name: redis-ha-load-balancer-conf
          optional: false
      - name: config
        emptyDir: {}
